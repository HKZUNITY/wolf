declare module "module_bubble" {
    /**
     * @Author       : lei.zhao
     * @Date         : 2022-11-01 10:48:30
     * @LastEditors  : lei.zhao
     * @LastEditTime : 2023-04-21 13:47:17
     * @FilePath     : \commonmodule_bubble\JavaScripts\module\bubble\IBubbleUI.ts
     * @Description  : 修改描述
     */
    export interface IBubbleUI extends mw.UIScript {
        /**
         * 显示文本的Textblock
         */
        text: mw.TextBlock;
        /**
         * 文本BG
         */
        border: mw.Image;
        /**
         * 文本BG
         */
        bg: mw.Image;
        array: mw.Image;
    }
}

declare module "module_bubble" {
    export namespace BubblePool {
        /**
         * 获取UI对象池
         * @returns
         */
        function getUIPool(): mwext.ObjPool<IBubbleUI>;
        /**注册UI生成器 */
        function registerUI(createUIHandler: () => IBubbleUI): void;
    }
}

declare module "module_bubble" {
    export interface IBubbleConfig {
        time: number;
        maxCount: number;
        offset: number;
    }
    export interface IBubbleSkin {
        id: number;
        textColor: mw.LinearColor;
        fontSize: number;
        bg: string;
        bgColor: mw.LinearColor;
        borderVisible: boolean;
        border: string;
        borderColor: mw.LinearColor;
        arrayVisible: boolean;
        borderSpaceUp: number;
        borderSpaceDown: number;
        borderSpaceLeft: number;
        borderSpaceRight: number;
        zOrder: number;
    }
}

declare module "module_bubble" {
    /**
    * @Author: zhaolei
    * @Date: 2022-08-18 15:11:45
    * @LastEditors: zhaolei
    * @Description: 气泡对话框对象，纯客户端类
    */
    export class BubbleChat {
        private skin;
        cfg: IBubbleConfig;
        private _text;
        private onMeasure;
        private location;
        /**
         * 文本框状态机
         */
        private _fsm;
        private _ui;
        /**
         * Z轴偏移
         */
        offsetZ: number;
        private _halfWidth;
        private _height;
        private _currentHeight;
        /**是否销毁 */
        isDestroy: boolean;
        /**
         *
         * @param object 所属的物体
         * @param _ui 所属的UI，从对象池拿
         * @param _text 所属的UI，展示的文字
         */
        constructor(skin: IBubbleSkin, cfg: IBubbleConfig, _text: string, onMeasure: () => void, location: () => mw.Vector);
        /**
        * @description: 更新对话框
        * @param {number} dt
        * @return {*}
        */
        onUpdate(dt: number): boolean;
        jump(_scale: number): void;
        /**
         * 隐藏UI，移除到屏幕外面
         */
        scale(_scale: number): void;
        offset(offset: number): void;
        get height(): number;
        measure(): void;
        get isSizeValidate(): boolean;
        retrySizeValidate(): void;
        showText(): void;
        destory(): void;
        /**
         * 更新位置
         */
        updateUI(): boolean;
    }
}

declare module "module_bubble" {
    export class BubbleUser {
        guid: string;
        private cfg;
        /**对话气泡实例 */
        private _bubbles;
        /**
         * 所属物体
         */
        private gameObject;
        constructor(guid: string, cfg: IBubbleConfig);
        /**
         * 获取气泡数量
         */
        get count(): number;
        /**
         * 更新显示
         * @param dt
         */
        onUpdate(dt: number): void;
        /**
         * 显示一个对话框
         */
        show(skin: IBubbleSkin, text: string, cfg: IBubbleConfig): void;
        private onLocation;
        /**重新定位 */
        private onMeasure;
        /**
         * 清除所有对话
         * @param object
         */
        clear(): void;
    }
}

declare module "module_bubble" {
    class BubbleSkin implements IBubbleSkin {
        id: number;
        textColor: mw.LinearColor;
        fontSize: number;
        arrayVisible: boolean;
        bg: string;
        bgColor: mw.LinearColor;
        borderVisible: boolean;
        border: string;
        borderColor: mw.LinearColor;
        borderSpaceUp: number;
        borderSpaceDown: number;
        borderSpaceLeft: number;
        borderSpaceRight: number;
        zOrder: number;
    }
    export namespace Bubble {
        /**气泡代理，勿用 */
        let _proxy: BubbleProxy;
        /**
         * 展示气泡，双端可用
         * @param skinId 气泡外观配置，为0时根据说话者选择默认配置
         * @param text 文本
         * @param guid 说话者的GUID，可以为场景物体,服务端必传，客户端不传为主控者说话
         * @param isLocally true仅在本地显示 false所以端显示
         */
        function showBubble(skinId: number, text: string, guid?: string, isLocally?: boolean): void;
        /**
        * 关闭所属物体气泡，双端可用
        * @param guid 说话者的GUID，可以为场景物体,服务端必传，客户端不传为主控者
        * @param isLocally true仅在本地关闭 false所以端关闭
        */
        function closeBubble(guid?: string, isLocally?: boolean): void;
    }
    export abstract class BubbleProxy extends mw.Script implements IBubbleConfig {
        private viewDistance;
        private playerSkinId;
        private otherSkinId;
        time: number;
        maxCount: number;
        offset: number;
        skins: BubbleSkin[];
        /**
         * 储存所有物体Bubble
         */
        private bubbleUsers;
        /**本机玩家 */
        private player;
        /** 当脚本被实例后，会在第一帧更新前调用此函数 */
        protected onStart(): void;
        /**创建UI接口 */
        protected abstract onCreateBubbleUI(): IBubbleUI;
        /**
         * 显示气泡
         * @param skinId
         * @param text
         * @param player
         */
        showBubble(skinId: number, text: string, guid: string, isLocally: boolean): void;
        private boradcastCloseBubble;
        /**
         * 关闭气泡
         * @param guid
         */
        closeBubble(guid: string, isLocally: boolean): void;
        /**
         * 中转调用全局显示气泡
         * @param guid
         * @param skinId
         * @param text
         */
        private serverShowBubble;
        private serverCloseBubble;
        /**接受所有人的气泡对话 */
        private boardCastBubble;
        /**
         * 周期函数 每帧执行
         * 此函数执行需要将this.useUpdate赋值为true
         * @param dt 当前帧与上一帧的延迟 / 秒
         */
        protected onUpdate(dt: number): void;
        /** 脚本被销毁时最后一帧执行完调用此函数 */
        protected onDestroy(): void;
    }
}
