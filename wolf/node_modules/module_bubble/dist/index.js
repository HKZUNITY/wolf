'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

exports.BubblePool = void 0;
(function (BubblePool) {
    const size = new mw.Vector2(1920, 0);
    let _uiPool = null;
    let createUICall;
    /**
     * 获取UI对象池
     * @returns
     */
    function getUIPool() {
        if (!_uiPool) {
            _uiPool = new mwext.ObjPool(() => {
                const ui = createUICall();
                return ui;
            }, (ui) => {
                ui.uiObject.visibility = mw.SlateVisibility.HitTestInvisible;
                ui.uiObject.renderScale = mw.Vector2.zero;
                ui.text.text = "";
                ui.text.textHorizontalLayout = mw.UITextHorizontalLayout.NoClipping;
                ui.text.size = size;
            }, ui => { ui.destroy(); });
        }
        return _uiPool;
    }
    BubblePool.getUIPool = getUIPool;
    /**注册UI生成器 */
    function registerUI(createUIHandler) {
        createUICall = createUIHandler;
    }
    BubblePool.registerUI = registerUI;
})(exports.BubblePool || (exports.BubblePool = {}));

/**
* @Author: zhaolei
* @Date: 2022-08-18 15:11:45
* @LastEditors: zhaolei
* @Description: 气泡对话框对象，纯客户端类
*/
class BubbleChat {
    skin;
    cfg;
    _text;
    onMeasure;
    location;
    /**
     * 文本框状态机
     */
    _fsm;
    _ui;
    /**
     * Z轴偏移
     */
    offsetZ = 0;
    _halfWidth = 0;
    _height = 0;
    _currentHeight = 0;
    /**是否销毁 */
    isDestroy = false;
    /**
     *
     * @param object 所属的物体
     * @param _ui 所属的UI，从对象池拿
     * @param _text 所属的UI，展示的文字
     */
    constructor(skin, cfg, _text, onMeasure, location) {
        this.skin = skin;
        this.cfg = cfg;
        this._text = _text;
        this.onMeasure = onMeasure;
        this.location = location;
        this._ui = exports.BubblePool.getUIPool().spawn();
        this._ui.text.text = _text;
        this._ui.text.autoSizeEnable = true;
        UIService.showUI(this._ui, mw.UILayerScene);
        this._ui.uiObject.zOrder = skin.zOrder;
        this._fsm = new BubbleFsm(this);
    }
    /**
    * @description: 更新对话框
    * @param {number} dt
    * @return {*}
    */
    onUpdate(dt) {
        return this._fsm.update(dt);
    }
    jump(_scale) {
        this._currentHeight = _scale * this._height;
        this.onMeasure();
    }
    /**
     * 隐藏UI，移除到屏幕外面
     */
    scale(_scale) {
        tempSize.x = Math.min(1, _scale * 3);
        tempSize.y = _scale;
        this._ui.uiObject.renderScale = tempSize;
    }
    offset(offset) {
        this.offsetZ = offset;
    }
    get height() {
        return this._currentHeight;
    }
    measure() {
        const size = this._ui.text.size;
        //计算总长度
        tempSize.set(size);
        //计算富文本高度
        if (tempSize.x > 300) {
            tempSize.y = size.y + (Math.ceil(tempSize.x / 300) - 1) * size.y;
            tempSize.x = 300;
            this._ui.text.textHorizontalLayout = mw.UITextHorizontalLayout.AutoWarpText;
            this._ui.text.autoSizeEnable = false;
            this._ui.text.size = tempSize;
        }
        if (tempSize.y == 0) {
            tempSize.y = 32;
        }
        tempSize.set(tempSize.x + this.skin.borderSpaceLeft + this.skin.borderSpaceRight, tempSize.y + this.skin.borderSpaceUp + this.skin.borderSpaceDown);
        this._halfWidth = tempSize.x / 2;
        this._height = tempSize.y;
        //计算大小
        this._ui.uiObject.size = tempSize;
        this._ui.bg.size = tempSize;
        if (this.skin.borderVisible) {
            tempSize.x += 6;
            tempSize.y += 6;
            this._ui.border.size = tempSize;
        }
        this._ui.text.position = tempSize.set(this.skin.borderSpaceLeft, this.skin.borderSpaceUp);
        //应用皮肤
        this._ui.bg.imageGuid = this.skin.bg;
        this._ui.bg.imageColor = this.skin.bgColor;
        if (this.skin.borderVisible) {
            this._ui.border.imageGuid = this.skin.border;
            this._ui.border.imageColor = this.skin.borderColor;
            this._ui.border.visibility = mw.SlateVisibility.HitTestInvisible;
        }
        else {
            this._ui.border.visibility = mw.SlateVisibility.Collapsed;
        }
        this._ui.text.text = "";
        this._ui.text.contentColor = this.skin.textColor;
        this._ui.text.fontSize = this.skin.fontSize;
        if (this.skin.arrayVisible) {
            this._ui.array.visibility = mw.SlateVisibility.HitTestInvisible;
            this._ui.array.position = tempSize.set(this._halfWidth - 50, this._height - 30);
            this._ui.array.imageColor = this.skin.bgColor;
        }
        else {
            this._ui.array.visibility = mw.SlateVisibility.Collapsed;
        }
    }
    get isSizeValidate() {
        const size = this._ui.text.size;
        return size.y > 0;
    }
    retrySizeValidate() {
        this._ui.text.text = this._text;
        this._ui.text.autoSizeEnable = true;
    }
    showText() {
        this._ui.text.text = this._text;
    }
    destory() {
        this._ui.uiObject.visibility = mw.SlateVisibility.Collapsed;
        if (this.isDestroy) {
            this._ui.destroy();
        }
        else {
            exports.BubblePool.getUIPool().despawn(this._ui);
        }
    }
    /**
     * 更新位置
     */
    updateUI() {
        if (!localCharacter) {
            const player = mw.Player.localPlayer;
            if (player) {
                localCharacter = player.character;
            }
        }
        if (localCharacter) {
            const loc = this.location();
            if (loc) {
                loc.z += this.cfg.offset;
                ScreenUtil.projectWorldPositionToWidgetPosition(localCharacter.player, loc, tempSize, false);
                tempSize.y -= this.offsetZ;
                tempSize.x -= this._halfWidth;
                this._ui.uiObject.position = tempSize;
                return true;
            }
        }
        return false;
    }
}
/**
 * 计算状态
 */
class StateMeasure {
    fsm;
    /**
     * 延时时间
     */
    _timer;
    _retryTime;
    constructor(fsm) {
        this.fsm = fsm;
    }
    onExit() {
    }
    onEnter() {
        this._timer = 0.2;
        this._retryTime = 5;
        this.fsm.bubble.scale(0);
    }
    update(dt) {
        this._timer -= dt;
        if (this._timer <= 0) {
            if (this.fsm.bubble.isSizeValidate) {
                this.fsm.bubble.measure();
                this.fsm.switchState(StateJump);
            }
            else {
                this.fsm.bubble.retrySizeValidate();
                if (--this._retryTime <= 0) {
                    //拿不到了，销毁
                    this.fsm.bubble.isDestroy = true;
                    this.fsm.finish();
                }
                this._timer = 0.2;
            }
        }
    }
}
/**
 * 顶开状态
 */
class StateJump {
    fsm;
    /**
     * 延时时间
     */
    _timer;
    constructor(fsm) {
        this.fsm = fsm;
    }
    onExit() {
    }
    onEnter() {
        this._timer = 0;
    }
    update(dt) {
        this._timer += dt * 5;
        if (this._timer >= 1) {
            this._timer = 1;
            this.fsm.switchState(StateExpand);
        }
        this.fsm.bubble.jump(this._timer);
    }
}
/**
 * 展开状态
 */
class StateExpand {
    fsm;
    /**
     * 展开时间
     */
    _timer;
    constructor(fsm) {
        this.fsm = fsm;
    }
    onExit() {
    }
    onEnter() {
        this._timer = 0;
    }
    update(dt) {
        this._timer += dt * 5;
        if (this._timer >= 1) {
            this._timer = 1;
            this.fsm.switchState(StateView);
        }
        this.fsm.bubble.scale(this._timer);
        if (!this.fsm.bubble.updateUI()) {
            this.fsm.finish();
        }
    }
}
/**
 * 显示状态
 */
class StateView {
    fsm;
    _timer;
    constructor(fsm) {
        this.fsm = fsm;
    }
    onExit() {
    }
    onEnter() {
        this._timer = this.fsm.bubble.cfg.time;
        this.fsm.bubble.showText();
    }
    update(dt) {
        this._timer -= dt;
        if (this._timer <= 0 || !this.fsm.bubble.updateUI()) {
            this.fsm.finish();
        }
    }
}
class BubbleFsm {
    bubble;
    _isFinish;
    _stateList;
    /**
     * 当前状态
     */
    _currentState;
    /**
     * 下一个状态
     */
    _nextState;
    constructor(bubble) {
        this.bubble = bubble;
        this._stateList = [];
        this._stateList.push(this._currentState = new StateMeasure(this));
        this._stateList.push(new StateExpand(this));
        this._stateList.push(new StateView(this));
        this._stateList.push(new StateJump(this));
        this._currentState.onEnter();
    }
    /**
     * 状态机完成
     */
    finish() {
        this._isFinish = true;
    }
    /**
     * 更新状态机
     * @param dt
     */
    update(dt) {
        this._currentState.update(dt);
        this._doChangeState();
        return this._isFinish;
    }
    /**
     * 调用切换到下一个状态，为了防止状态混乱，仅在update期间调用
     */
    _doChangeState() {
        if (this._nextState) {
            this._currentState.onExit();
            this._currentState = this._nextState;
            this._currentState.onEnter();
            this._nextState = null;
        }
    }
    /**
     * 切换到下一个状态
     */
    switchState(stateClass) {
        if (this._currentState.constructor.name != stateClass.name) {
            this._nextState = this._stateList.find(i => i.constructor.name == stateClass.name);
        }
    }
}
const tempSize = new mw.Vector2(0);
let localCharacter;
if (mw.SystemUtil.isClient()) {
    mw.Player.asyncGetLocalPlayer().then(player => {
        localCharacter = player.character;
    });
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

/*
 * @Author: xicun.kang xicun.kang@appshahe.com
 * @Date: 2023-07-18 14:41:02
 * @LastEditors: xicun.kang xicun.kang@appshahe.com
 * @LastEditTime: 2023-07-18 14:43:23
 * @FilePath: \commonmodule_bubble\JavaScripts\module\bubble\BubbleUser.ts
 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
 */
class BubbleUser {
    guid;
    cfg;
    /**对话气泡实例 */
    _bubbles = [];
    /**
     * 所属物体
     */
    gameObject;
    constructor(guid, cfg) {
        this.guid = guid;
        this.cfg = cfg;
    }
    /**
     * 获取气泡数量
     */
    get count() {
        return this._bubbles.length;
    }
    /**
     * 更新显示
     * @param dt
     */
    onUpdate(dt) {
        for (let i = 0; i < this._bubbles.length; i++) {
            if (this._bubbles[i].onUpdate(dt)) {
                this._bubbles[i].destory();
                this._bubbles.splice(i, 1);
                i--;
            }
        }
    }
    /**
     * 显示一个对话框
     */
    show(skin, text, cfg) {
        if (!this.gameObject) {
            this.gameObject = mw.GameObject.findGameObjectById(this.guid);
        }
        if (!this.gameObject)
            return;
        if (this._bubbles.length >= this.cfg.maxCount) {
            // 删除多余文本，达到最大限制
            const bubble = this._bubbles.shift();
            bubble.destory();
        }
        this._bubbles.push(new BubbleChat(skin, cfg, text, this.onMeasure, this.onLocation));
    }
    onLocation = () => {
        return this.gameObject.worldTransform.position.clone();
    };
    /**重新定位 */
    onMeasure = () => {
        let offset = 0;
        for (let i = this._bubbles.length - 1; i >= 0; i--) {
            offset += this._bubbles[i].height;
            this._bubbles[i].offset(offset);
            offset += 5;
        }
    };
    /**
     * 清除所有对话
     * @param object
     */
    clear() {
        for (let i = 0; i < this._bubbles.length; i++) {
            this._bubbles[i].destory();
            this._bubbles.splice(i, 1);
            i--;
        }
    }
}

let BubbleSkin = class BubbleSkin {
    id = 0;
    textColor = mw.LinearColor.black;
    fontSize = 28;
    arrayVisible = true;
    bg = "136288";
    bgColor = mw.LinearColor.white;
    borderVisible = true;
    border = "136288";
    borderColor = new mw.LinearColor(0.4, 0.4, 0.4, 0.6);
    borderSpaceUp = 20;
    borderSpaceDown = 20;
    borderSpaceLeft = 20;
    borderSpaceRight = 20;
    zOrder = -1;
};
__decorate([
    mw.Property({ displayName: "配置ID" })
], BubbleSkin.prototype, "id", void 0);
__decorate([
    mw.Property({ displayName: "文字颜色" })
], BubbleSkin.prototype, "textColor", void 0);
__decorate([
    mw.Property({ displayName: "文字大小" })
], BubbleSkin.prototype, "fontSize", void 0);
__decorate([
    mw.Property({ displayName: "显示尾巴" })
], BubbleSkin.prototype, "arrayVisible", void 0);
__decorate([
    mw.Property({ displayName: "背景图片" })
], BubbleSkin.prototype, "bg", void 0);
__decorate([
    mw.Property({ displayName: "背景颜色" })
], BubbleSkin.prototype, "bgColor", void 0);
__decorate([
    mw.Property({ displayName: "显示边框" })
], BubbleSkin.prototype, "borderVisible", void 0);
__decorate([
    mw.Property({ displayName: "边框图片" })
], BubbleSkin.prototype, "border", void 0);
__decorate([
    mw.Property({ displayName: "边框颜色" })
], BubbleSkin.prototype, "borderColor", void 0);
__decorate([
    mw.Property({ displayName: "文字上边距" })
], BubbleSkin.prototype, "borderSpaceUp", void 0);
__decorate([
    mw.Property({ displayName: "文字下边距" })
], BubbleSkin.prototype, "borderSpaceDown", void 0);
__decorate([
    mw.Property({ displayName: "文字左边距" })
], BubbleSkin.prototype, "borderSpaceLeft", void 0);
__decorate([
    mw.Property({ displayName: "文字右边距" })
], BubbleSkin.prototype, "borderSpaceRight", void 0);
__decorate([
    mw.Property({ displayName: "ZOrder" })
], BubbleSkin.prototype, "zOrder", void 0);
BubbleSkin = __decorate([
    Serializable
], BubbleSkin);
exports.Bubble = void 0;
(function (Bubble) {
    /**
     * 展示气泡，双端可用
     * @param skinId 气泡外观配置，为0时根据说话者选择默认配置
     * @param text 文本
     * @param guid 说话者的GUID，可以为场景物体,服务端必传，客户端不传为主控者说话
     * @param isLocally true仅在本地显示 false所以端显示
     */
    function showBubble(skinId, text, guid, isLocally) {
        Bubble._proxy && Bubble._proxy.showBubble(skinId, text, guid, isLocally);
    }
    Bubble.showBubble = showBubble;
    /**
    * 关闭所属物体气泡，双端可用
    * @param guid 说话者的GUID，可以为场景物体,服务端必传，客户端不传为主控者
    * @param isLocally true仅在本地关闭 false所以端关闭
    */
    function closeBubble(guid, isLocally) {
        Bubble._proxy && Bubble._proxy.closeBubble(guid, isLocally);
    }
    Bubble.closeBubble = closeBubble;
})(exports.Bubble || (exports.Bubble = {}));
class BubbleProxy extends mw.Script {
    viewDistance = 3000;
    playerSkinId = 0;
    otherSkinId = 0;
    time = 5;
    maxCount = 4;
    offset = 60;
    skins = [new BubbleSkin()];
    /**
     * 储存所有物体Bubble
     */
    bubbleUsers = [];
    /**本机玩家 */
    player;
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        exports.Bubble._proxy = this;
        if (SystemUtil.isClient()) {
            exports.BubblePool.registerUI(this.onCreateBubbleUI);
            mw.Player.asyncGetLocalPlayer().then(player => {
                this.player = player;
                this.useUpdate = true;
            });
            mw.Player.onPlayerLeave.add(player => {
                let bubbleUser = this.bubbleUsers.find(i => i.guid == player.character.gameObjectId);
                bubbleUser && bubbleUser.clear();
            });
        }
    }
    /**
     * 显示气泡
     * @param skinId
     * @param text
     * @param player
     */
    showBubble(skinId, text, guid, isLocally) {
        if (SystemUtil.isClient()) {
            if (!guid) {
                this.player && (isLocally ? this.boardCastBubble(this.player.character.gameObjectId, skinId, text) : this.serverShowBubble(this.player.character.gameObjectId, skinId, text));
            }
            else {
                isLocally ? this.boardCastBubble(guid, skinId, text) : this.serverShowBubble(guid, skinId, text);
            }
        }
        else {
            this.serverShowBubble(guid, skinId, text);
        }
    }
    boradcastCloseBubble(guid) {
        let bubbleUser = this.bubbleUsers.find(i => i.guid == guid);
        bubbleUser && bubbleUser.clear();
    }
    /**
     * 关闭气泡
     * @param guid
     */
    closeBubble(guid, isLocally) {
        if (SystemUtil.isClient()) {
            if (isLocally) {
                if (!guid) {
                    this.player && this.boradcastCloseBubble(this.player.character.gameObjectId);
                }
                else {
                    this.boradcastCloseBubble(guid);
                }
            }
            else {
                if (!guid) {
                    this.player && this.serverCloseBubble(this.player.character.gameObjectId);
                }
                else {
                    this.serverCloseBubble(guid);
                }
            }
        }
        else {
            this.serverCloseBubble(guid);
        }
    }
    /**
     * 中转调用全局显示气泡
     * @param guid
     * @param skinId
     * @param text
     */
    serverShowBubble(guid, skinId, text) {
        this.boardCastBubble(guid, skinId, text);
    }
    serverCloseBubble(guid) {
        this.boradcastCloseBubble(guid);
    }
    /**接受所有人的气泡对话 */
    boardCastBubble(guid, skinId, text) {
        if (this.viewDistance > 0 && this.player) {
            const obj = mw.GameObject.findGameObjectById(guid);
            if (obj) {
                const squareDistance = mw.Vector2.squaredDistance(this.player.character.worldTransform.position, obj.worldTransform.position);
                if (squareDistance >= this.viewDistance * this.viewDistance) {
                    //距离超出，不显示
                    return;
                }
            }
        }
        let bubbleUser = this.bubbleUsers.find(i => i.guid == guid);
        if (!bubbleUser) {
            bubbleUser = new BubbleUser(guid, this);
            this.bubbleUsers.push(bubbleUser);
        }
        if (!skinId) {
            //自动选择使用者ID
            skinId = this.player ? (this.player.character.gameObjectId == guid ? this.playerSkinId : this.otherSkinId) : this.otherSkinId;
        }
        bubbleUser.show(this.skins.find(i => i.id == skinId) || this.skins[0], text, this);
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
        for (let i = 0; i < this.bubbleUsers.length; i++) {
            const bubbleUser = this.bubbleUsers[i];
            if (bubbleUser.count == 0) {
                //没有气泡，回收
                this.bubbleUsers.splice(i, 1);
                i--;
            }
            else {
                bubbleUser.onUpdate(dt);
            }
        }
    }
    /** 脚本被销毁时最后一帧执行完调用此函数 */
    onDestroy() {
    }
}
__decorate([
    mw.Property({ displayName: "最大显示距离(0-无限远)", group: "配置" })
], BubbleProxy.prototype, "viewDistance", void 0);
__decorate([
    mw.Property({ displayName: "自己气泡", group: "配置" })
], BubbleProxy.prototype, "playerSkinId", void 0);
__decorate([
    mw.Property({ displayName: "他人气泡", group: "配置" })
], BubbleProxy.prototype, "otherSkinId", void 0);
__decorate([
    mw.Property({ displayName: "存在时间", group: "配置" })
], BubbleProxy.prototype, "time", void 0);
__decorate([
    mw.Property({ displayName: "最大数量", group: "配置" })
], BubbleProxy.prototype, "maxCount", void 0);
__decorate([
    mw.Property({ displayName: "头顶偏移", group: "配置" })
], BubbleProxy.prototype, "offset", void 0);
__decorate([
    mw.Property({ displayName: "气泡配置", arrayDefault: new BubbleSkin() })
], BubbleProxy.prototype, "skins", void 0);
__decorate([
    RemoteFunction(mw.Client, mw.Multicast)
], BubbleProxy.prototype, "boradcastCloseBubble", null);
__decorate([
    RemoteFunction(mw.Server)
], BubbleProxy.prototype, "serverShowBubble", null);
__decorate([
    RemoteFunction(mw.Server)
], BubbleProxy.prototype, "serverCloseBubble", null);
__decorate([
    RemoteFunction(mw.Client, mw.Multicast)
], BubbleProxy.prototype, "boardCastBubble", null);

exports.BubbleChat = BubbleChat;
exports.BubbleProxy = BubbleProxy;
exports.BubbleUser = BubbleUser;
//# sourceMappingURL=index.js.map
